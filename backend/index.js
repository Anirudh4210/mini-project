const express = require('express');
const cors = require('cors');
const app = express();

app.use(cors());
app.use(express.json());

const correctAnswers = {
  programming: {
    1: '8',
    2: 'str',
    3: '5',
    4: '#',
    5: '//',
    6: 'int',
    7: 'No keyword needed',
    8: '[0, 1, 2, 3, 4]',
    9: 'upper()',
    10: '1',
    11: 'P',
    12: '==',
    13: 'True',
    14: '7',
    15: 'str()',
    16: 'HelloWorld',
    17: 'both for and while',
    18: '2',
    19: 'False',
    20: 'input()',
    21: 'False',
    22: 'str',
    23: 'True',
    24: '**',
    25: '5',
    26: 'both isdigit() and isnumeric()',
    27: 'abcabc',
    28: 'if',
    29: '5.0',
    30: 'Returns True if both conditions are true',
    31: '[1, 2, 3, 4]',
    32: 'def',
    33: '[0, 2, 4]',
    34: 'ell',
    35: 'pop()',
    36: '[1, 2]',
    37: 'math',
    38: 'Exits the loop',
    39: '{"a": 1, "b": 2}',
    40: 'append()',
    41: '[1, 2, 3]',
    42: 'clear()',
    43: '[0, 2, 4]',
    44: 'Skips to the next iteration',
    45: '3',
    46: 'extend()',
    47: '(1, 2, 3)',
    48: 'random',
    49: '{1, 2, 3}',
    50: 'Checks membership',
    51: '1',
    52: 'reverse()',
    53: 'Python',
    54: 'Does nothing',
    55: '5',
    56: 'in',
    57: '2',
    58: 'Returns True if either condition is true',
    59: '[2, 3, 4]',
    60: 'remove()',
    61: '3',
    62: 're',
    63: 'Writes "test" to file.txt',
    64: 'Creates an anonymous function',
    65: '[2, 4, 6]',
    66: 'Creates a static method that doesn\'t need self',
    67: 'try-except',
    68: '8',
    69: 'Calls the parent class method',
    70: 'datetime',
    71: '[(1, 3), (2, 4)]',
    72: 'Creates a generator',
    73: '__init__',
    74: 'True',
    75: 'Declares a global variable',
    76: '3',
    77: 'os',
    78: 'Creates a getter method',
    79: 'frozenset({1, 2, 3})',
    80: 'Accesses a variable in an outer scope',
    81: '10',
    82: 'threading.Thread',
    83: 'Raises an error if a condition is false',
    84: 'True',
    85: 'Specialized container datatypes',
    86: 'False',
    87: 'copy.deepcopy',
    88: 'Tools for working with iterators',
    89: '[(0, \'a\'), (1, \'b\')]',
    90: 'Asynchronous programming support',
  },
  web_development: {
    91: '<html>',
    92: 'Space outside an element',
    93: '#',
    94: 'block',
    95: '<a>',
    96: 'Space inside an element',
    97: '<p>',
    98: 'Text color',
    99: '<img>',
    100: 'font-size: 16px;',
    101: '<h1>',
    102: 'Border around an element',
    103: '<ul>',
    104: 'Hides an element',
    105: 'href',
    106: '<br>',
    107: 'background-color',
    108: '<table>',
    109: 'Text alignment',
    110: 'Both <style> and <link>',
    111: 'text-align: center;',
    112: '<form>',
    113: 'Floats an element to the left or right',
    114: '<tr>',
    115: 'Positions an element relative to its parent',
    116: 'src',
    117: 'Font boldness',
    118: '<li>',
    119: 'Stacking order of elements',
    120: '<th>',
    121: 'To layout items in a flexible container',
    122: 'onclick',
    123: 'Converts an object to a JSON string',
    124: 'justify-content',
    125: 'Selects the first element matching a CSS selector',
    126: 'Direction of flex items',
    127: 'addEventListener()',
    128: 'Animates changes in properties',
    129: 'method',
    130: 'Selects an element by ID',
    131: 'Aligns items along the cross axis',
    132: 'removeEventListener()',
    133: 'Adds a shadow to an element',
    134: '<video>',
    135: 'Gets or sets the HTML content of an element',
    136: 'Defines columns in a grid layout',
    137: 'map()',
    138: 'Content overflow behavior',
    139: '<audio>',
    140: 'Delays execution of a function',
    141: 'Positions an element relative to its normal position',
    142: 'filter()',
    143: 'Element transparency',
    144: 'action',
    145: 'Adds an element to the end of an array',
    146: 'Displays an element as an inline-level block container',
    147: 'reduce()',
    148: 'Rounds the corners of an element',
    149: '<select>',
    150: 'Repeats a function at intervals',
    151: 'To define an asynchronous function',
    152: '200',
    153: 'Rotates an element 90 degrees',
    154: 'Pauses execution until a Promise resolves',
    155: 'fetch',
    156: 'Sets the gap between grid items',
    157: 'new Promise',
    158: 'Applies styles based on media queries',
    159: '<section>',
    160: 'Resolves multiple Promises concurrently',
    161: 'Clips an element to a specific shape',
    162: 'stopPropagation()',
    163: 'Controls how an image fits in its container',
    164: '<nav>',
    165: 'Rejects a Promise',
    166: 'Applies a filter to the background',
    167: 'preventDefault()',
    168: 'Hints at future changes for optimization',
    169: '<article>',
    170: 'Resolves a Promise',
    171: 'Controls mouse events on an element',
    172: 'includes()',
    173: 'Sets the aspect ratio of an element',
    174: '<footer>',
    175: 'Creates an array from an iterable',
    176: 'Blends an element with its background',
    177: 'sort()',
    178: 'Changes the direction of text',
    179: '<header>',
    180: 'Returns an array of object keys',
  },
  data_analysis: {
    181: 'Adds a range of numbers',
    182: 'DATE',
    183: 'To summarize data',
    184: 'Counts non-empty cells',
    185: 'SELECT',
    186: 'Calculates the mean of numbers',
    187: 'WHERE',
    188: 'Finds the largest value',
    189: 'INSERT',
    190: 'Finds the smallest value',
    191: 'UPDATE',
    192: 'Rounds a number to a specified decimal',
    193: 'DELETE',
    194: 'Performs conditional logic',
    195: 'SELECT',
    196: 'Combines text from multiple cells',
    197: 'FROM',
    198: 'Counts characters in a cell',
    199: 'ORDER BY',
    200: 'Extracts characters from the left of a string',
    201: 'Both LIMIT and TOP',
    202: 'Extracts characters from the right of a string',
    203: 'DROP',
    204: 'Returns the current date',
    205: 'CREATE TABLE',
    206: 'Returns the current date and time',
    207: 'ALTER TABLE',
    208: 'Removes leading and trailing spaces',
    209: 'HAVING',
    210: 'Converts text to uppercase',
    211: 'Looks up a value vertically in a range',
    212: 'ORDER BY',
    213: 'Generates descriptive statistics',
    214: 'Groups rows with the same values',
    215: 'MAX',
    216: 'Looks up a value horizontally in a range',
    217: 'COUNT()',
    218: 'Displays the first few rows',
    219: 'Filters groups after GROUP BY',
    220: 'COUNTIF',
    221: 'AVG()',
    222: 'Displays the last few rows',
    223: 'MAX()',
    224: 'Sums values that meet a condition',
    225: 'MIN()',
    226: 'Returns the dimensions of the dataframe',
    227: 'JOIN',
    228: 'Averages values that meet a condition',
    229: 'LEFT JOIN',
    230: 'Removes rows or columns',
    231: 'RIGHT JOIN',
    232: 'Returns a value at a specific position',
    233: 'INNER JOIN',
    234: 'Sorts the dataframe',
    235: 'FULL JOIN',
    236: 'Finds the position of a value in a range',
    237: 'CONCAT()',
    238: 'Groups data by a column',
    239: 'UPPER()',
    240: 'Selects a value from a list based on an index',
    241: 'To combine rows from two or more tables',
    242: 'df.fillna() or df.dropna()',
    243: 'Strong positive relationship',
    244: 'Filters groups after GROUP BY',
    245: 'merge()',
    246: 'Defines a temporary result set (CTE)',
    247: 'pivot()',
    248: 'Strong negative relationship',
    249: 'STDDEV()',
    250: 'Creates a pivot table',
    251: 'PARTITION BY',
    252: 'corr()',
    253: 'Assigns a rank to rows in a result set',
    254: 'resample()',
    255: 'Assigns a rank without gaps',
    256: 'cov()',
    257: 'Assigns a unique number to each row',
    258: 'to_numpy()',
    259: 'VARIANCE()',
    260: 'Applies a rolling window calculation',
    261: 'ORDER BY',
    262: 'both apply() and applymap()',
    263: 'Accesses the next row in a result set',
    264: 'hist()',
    265: 'Accesses the previous row in a result set',
    266: 'plot()',
    267: 'SUM() OVER',
    268: 'astype("category")',
    269: 'Divides rows into buckets',
    270: 'to_datetime()',
  },
  machine_learning: {
    271: 'Machine Learning',
    272: 'scikit-learn',
    273: 'To predict outcomes',
    274: 'Classification',
    275: 'To train the model',
    276: 'Model performs well on training data but poorly on test data',
    277: 'To evaluate the model',
    278: 'Linear Regression',
    279: 'An input variable used by the model',
    280: 'Find patterns in data',
    281: 'Clustering',
    282: 'numpy',
    283: 'The target variable to predict',
    284: 'The error due to overly simplistic assumptions',
    285: 'To clean and prepare data for modeling',
    286: 'Logistic Regression',
    287: 'A parameter set before training',
    288: 'The error due to sensitivity to small fluctuations',
    289: 'To tune the model',
    290: 'pandas',
    291: 'A continuous value',
    292: 'A class label',
    293: 'A mathematical representation of data',
    294: 'To normalize feature values',
    295: 'K-Means',
    296: 'To measure model error',
    297: 'One complete pass through the training data',
    298: 'To evaluate model performance',
    299: 'matplotlib',
    300: 'To predict a continuous value',
    301: 'To assess model performance',
    302: 'Decision Tree',
    303: 'True positives, false positives, true negatives, false negatives',
    304: 'To split data into training and testing sets',
    305: 'Accuracy',
    306: 'An optimization algorithm',
    307: 'SVM',
    308: 'The ratio of true positives to all predicted positives',
    309: 'The ratio of true positives to all actual positives',
    310: 'The harmonic mean of precision and recall',
    311: 'To reduce the number of features',
    312: 'KNN',
    313: 'Reducing the number of features',
    314: 'PCA',
    315: 'Adding a penalty to prevent overfitting',
    316: 'Lasso',
    317: 'Ridge',
    318: 'Bootstrap aggregating',
    319: 'Random Forest',
    320: 'Improving model performance by combining weak learners',
    321: 'Gradient Boosting',
    322: 'To perform hyperparameter tuning',
    323: 'A dataset with unequal class distribution',
    324: 'SMOTE',
    325: 'A sequence of data processing steps',
    326: 'Mean Squared Error',
    327: 'The proportion of variance explained',
    328: 'Combining multiple models to improve performance',
    329: 'TensorFlow',
    330: 'Converting categorical variables to binary vectors',
    331: 'The process of updating weights using gradients',
    332: 'ReLU',
    333: 'A regularization technique to prevent overfitting',
    334: 'LSTM',
    335: 'A neural network for image processing',
    336: 'To tune hyperparameters',
    337: 'Keras',
    338: 'Gradients becoming too small during backpropagation',
    339: 'Using ReLU activation',
    340: 'Using a pre-trained model for a new task',
    341: 'VGG16',
    342: 'Normalizing inputs of each layer',
    343: 'Q-Learning',
    344: 'Balancing trying new actions vs using known actions',
    345: 'Word2Vec',
    346: 'Focusing on important parts of the input',
    347: 'Transformer',
    348: 'Generative Adversarial Network',
    349: 'To generate synthetic data',
    350: 'To distinguish real data from fake',
    351: 'A neural network for unsupervised learning',
    352: 'Dimensionality reduction or data compression',
    353: 'Isolation Forest',
    354: 'The step size for weight updates',
    355: 'Adam',
    356: 'Stopping training when performance stops improving',
    357: 'Image rotation, flipping, scaling',
    358: 'Adjusting a pre-trained model for a specific task',
    359: 'YOLO',
    360: 'Learning from unlabeled data with generated labels',
  },
  cybersecurity: {
    361: 'A network security device',
    362: 'To authenticate users',
    363: 'A type of cyberattack using fraudulent emails',
    364: 'To detect and remove malware',
    365: 'Converting data into a secure format',
    366: 'P@ssw0rd123!',
    367: 'Malicious Software',
    368: 'To create a secure connection over the internet',
    369: 'Distributed Denial of Service',
    370: 'To overwhelm a system with traffic',
    371: 'Using two methods to verify identity',
    372: 'Password and SMS code',
    373: 'A type of malware that spreads',
    374: 'To fix vulnerabilities in software',
    375: 'Manipulating people to gain information',
    376: 'Pretending to be a tech support agent',
    377: 'HyperText Transfer Protocol Secure',
    378: 'Secure data transfer',
    379: 'To recover data after loss',
    380: 'Malware that locks data until a ransom is paid',
    381: 'To restrict access to authorized users',
    382: 'Malware that spies on user activities',
    383: 'To define rules for protecting data',
    384: 'A type of malware that self-replicates',
    385: 'To store and generate secure passwords',
    386: 'Trying all possible password combinations',
    387: 'To verify that a user is not a bot',
    388: 'Malware disguised as legitimate software',
    389: 'To detect suspicious activity',
    390: 'Unauthorized access to sensitive data',
    391: 'Monitors network for suspicious activity',
    392: 'To identify vulnerabilities in a system',
    393: 'Injecting malicious SQL code into a query',
    394: 'To verify the identity of a website',
    395: 'Injecting malicious scripts into web pages',
    396: 'To encrypt data',
    397: 'To decrypt data',
    398: 'Converting data into a fixed-length string',
    399: 'SHA-256',
    400: 'Intercepting communication between two parties',
    401: 'To secure data transfer',
    402: 'A vulnerability exploited before it is patched',
    403: 'To collect and analyze security events',
    404: 'Malware that records keystrokes',
    405: 'To identify weaknesses in a system',
    406: 'A network of infected computers',
    407: 'To test suspicious code in a safe environment',
    408: 'A method to take advantage of a vulnerability',
    409: 'To create a buffer zone between networks',
    410: 'Malware that provides unauthorized access',
    411: 'To evaluate security controls',
    412: 'The study of secure communication',
    413: 'SFTP',
    414: 'Malware that displays unwanted ads',
    415: 'To attract and detect attackers',
    416: 'Stealing an active user session',
    417: 'To provide secure authentication',
    418: 'Tricking users into clicking malicious links',
    419: 'To enforce security policies on devices',
    420: 'Redirecting users to fake websites',
    421: 'A prolonged and targeted cyberattack',
    422: 'To monitor and respond to security incidents',
    423: 'Open Web Application Security Project',
    424: 'To list the most critical web vulnerabilities',
    425: 'A vulnerability that allows code execution',
    426: 'To protect web applications from attacks',
    427: 'An attack exploiting physical implementation',
    428: 'To collect and analyze threat data',
    429: 'Using a victim’s device to mine cryptocurrency',
    430: 'To manage digital certificates',
    431: 'Malware that operates without files',
    432: 'To automate security incident response',
    433: 'Attacking a third-party vendor to gain access',
    434: 'To mislead attackers with fake assets',
    435: 'Ransomware sold as a service to attackers',
    436: 'To prevent unauthorized data exfiltration',
    437: 'Gaining higher-level access than authorized',
    438: 'To educate employees about security risks',
    439: 'A private forum for sharing cyberthreat info',
    440: 'To reduce vulnerabilities in software',
    441: 'Monitoring and responding to endpoint threats',
    442: 'To evaluate an organization’s security readiness',
    443: 'Managing user identities and permissions',
    444: 'To verify every user and device',
    445: 'Proactively searching for cyber threats',
    446: 'To model the stages of a cyberattack',
    447: 'Simulating attacks to test defenses',
    448: 'To defend against simulated attacks',
    449: 'Collaboration between red and blue teams',
    450: 'To manage and recover from security incidents',
  },
};

const jobMappings = {
  programming: {
    beginner: 'Junior Python Developer',
    intermediate: 'Software Developer',
    advanced: 'Senior Software Engineer',
  },
  web_development: {
    beginner: 'Junior Web Developer',
    intermediate: 'Front-End Developer',
    advanced: 'Full-Stack Developer',
  },
  data_analysis: {
    beginner: 'Data Entry Specialist',
    intermediate: 'Data Analyst',
    advanced: 'Data Scientist',
  },
  machine_learning: {
    beginner: 'Junior ML Engineer',
    intermediate: 'Machine Learning Engineer',
    advanced: 'Senior ML Engineer',
  },
  cybersecurity: {
    beginner: 'Junior Security Analyst',
    intermediate: 'Cybersecurity Analyst',
    advanced: 'Senior Cybersecurity Engineer',
  },
};

const companyMappings = {
  'Junior Python Developer': ['TCS', 'Infosys'],
  'Software Developer': ['Wipro', 'HCL'],
  'Senior Software Engineer': ['Google', 'Microsoft'],
  'Junior Web Developer': ['Accenture', 'Capgemini'],
  'Front-End Developer': ['Amazon', 'Flipkart'],
  'Full-Stack Developer': ['Facebook', 'Netflix'],
  'Data Entry Specialist': ['Cognizant', 'Genpact'],
  'Data Analyst': ['Deloitte', 'EY'],
  'Data Scientist': ['IBM', 'Oracle'],
  'Junior ML Engineer': ['NVIDIA', 'Intel'],
  'Machine Learning Engineer': ['Tesla', 'Uber'],
  'Senior ML Engineer': ['DeepMind', 'OpenAI'],
  'Junior Security Analyst': ['Symantec', 'McAfee'],
  'Cybersecurity Analyst': ['Palo Alto Networks', 'Cisco'],
  'Senior Cybersecurity Engineer': ['FireEye', 'CrowdStrike'],
};

app.post('/submit', (req, res) => {
  const { skill, answers } = req.body;
  let score = 0;

  // Validate answers against the correct answers for the current skill
  answers.forEach(({ id, value }) => {
    if (correctAnswers[skill][id] === value) {
      score++;
    }
  });

  const totalQuestions = 10; // Score is calculated for the current level (10 questions)
  const levelScore = score;
  const percentage = (levelScore / totalQuestions) * 100;

  // Determine the level based on the current level's performance (for progression)
  let level;
  if (percentage <= 33) level = 'beginner';
  else if (percentage <= 66) level = 'intermediate';
  else level = 'advanced';

  res.json({
    level,
    score: levelScore,
    percentage,
  });
});

app.listen(5000, () => {
  console.log('Backend running on http://localhost:5000');
});